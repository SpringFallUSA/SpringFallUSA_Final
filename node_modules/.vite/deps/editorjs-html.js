import {
  __commonJS
} from "./chunk-DC5AMYBS.js";

// node_modules/editorjs-html/.build/edjsHTML.node.js
var require_edjsHTML_node = __commonJS({
  "node_modules/editorjs-html/.build/edjsHTML.node.js"(exports, module) {
    var e = { code: ({ data: e2 }) => `<pre><code>${e2.code}</code></pre>`, embed: ({ data: e2 }) => {
      const t = e2.service;
      return "vimeo" === t ? `<iframe src="${e2.embed}" height="${e2.height}" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>` : "youtube" === t ? `<iframe width="${e2.width}" height="${e2.height}" src="${e2.embed}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>` : (console.error("[editorjs-html]: Only Youtube & Vimeo embeds are available by default. Write your own embed parser for other options."), "");
    }, header: ({ data: e2 }) => `<h${e2.level}>${e2.text}</h${e2.level}>`, image: ({ data: e2 }) => {
      var _a;
      const t = e2.caption ? e2.caption : "Image";
      return `<img src="${((_a = e2 == null ? void 0 : e2.file) == null ? void 0 : _a.url) || (e2 == null ? void 0 : e2.url)}" alt="${t}" />`;
    }, list: ({ data: e2 }) => {
      const t = "unordered" === e2.style ? "ul" : "ol", r = (e3, t2) => {
        const o = e3.map((e4) => {
          var _a;
          if (!e4.content && !e4.items) return `<li>${e4}</li>`;
          let o2 = "";
          return ((_a = e4.items) == null ? void 0 : _a.length) && (o2 = r(e4.items, t2)), e4.content ? `<li>${e4.content}${o2}</li>` : void 0;
        });
        return `<${t2}>${o.join("")}</${t2}>`;
      };
      return r(e2.items, t);
    }, paragraph: ({ data: e2 }) => {
      const t = e2.alignment || e2.align;
      return t ? `<p style="text-align:${t}"> ${e2.text} </p>` : `<p>${e2.text}</p>`;
    }, quote: ({ data: e2 }) => `<blockquote>${e2.text}</blockquote> - ${e2.caption}`, delimiter: ({ data: e2 }) => "<br/>" };
    module.exports = (t = {}, r = { strict: false }) => {
      const o = { ...e, ...t };
      return { parse: (e2) => (({ blocks: e3 }, t2, r2) => e3.reduce((e4, o2) => {
        if (o2.type in t2) return e4 + t2[o2.type](o2);
        const i = `[editorjs-html]: Parser function for ${o2.type} does not exist`;
        if (r2.strict) throw new Error(i);
        return console.error(i), e4;
      }, ""))(e2, o, r), parseBlock: (e2) => ((e3, t2, r2) => {
        if (e3.type in t2) return t2[e3.type](e3);
        const o2 = `[editorjs-html]: Parser function for ${e3.type} does not exist`;
        if (r2.strict) throw new Error(o2);
        console.error(o2);
      })(e2, o, r) };
    };
  }
});
export default require_edjsHTML_node();
//# sourceMappingURL=editorjs-html.js.map
